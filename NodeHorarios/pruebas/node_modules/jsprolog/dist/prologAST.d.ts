export declare enum PartType {
    Variable = 0,
    Atom = 1,
    Term = 2,
}
export declare abstract class Part {
    name: string;
    /**
     * @class Part
     * @classdesc Part := Variable(name) | Atom(name) | Term(name, partlist)
     * @param {string} name Name of the variable/atom/term
     */
    constructor(name: string);
    /**
     * Type of the
     * @member Part.type
     */
    type: PartType;
    toString(): string;
}
export declare class Variable extends Part {
    constructor(name: string);
}
export declare class Atom extends Part {
    constructor(head: string);
    static Nil: Atom;
}
/**
 * Term(name, list)
 */
export declare class Term extends Part {
    partlist: Partlist;
    constructor(head: string, list: Part[]);
    toString(): string;
}
export declare class Partlist {
    list: Part[];
    constructor(list: Part[]);
    toString(): string;
}
/**
 * Rule(head, bodylist): Part(head), [:- Body(bodylist)].
 */
export declare class Rule {
    head: Part;
    body: Partlist;
    isFact: boolean;
    constructor(head: Part, bodylist?: Part[]);
    toString(): string;
}
export declare function listOfArray(array: any, cdr?: Part): Part;
